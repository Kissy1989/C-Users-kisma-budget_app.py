import streamlit as st
import pandas as pd
import os
import json
from datetime import datetime

st.set_page_config(page_title="–ë—é–¥–∂–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏", page_icon="üìä", initial_sidebar_state="expanded")

FILE_NAME = "budget_data.xlsx"
USERS_FILE = "users.json"
SPRAVOCHNIK_FILE = "spravochnik.xlsx"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Å—Ç–∞—Ç–µ–π –∏ –ø–æ–¥—Å—Ç–∞—Ç–µ–π
@st.cache_data
def load_spravochnik():
    if os.path.exists(SPRAVOCHNIK_FILE):
        return pd.read_excel(SPRAVOCHNIK_FILE)
    else:
        return pd.DataFrame(columns=["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—á–µ—Ç", "–°—Ç–∞—Ç—å—è", "–ü–æ–¥—Å—Ç–∞—Ç—å—è"])

USERS = {
    "admin": "admin123456",
    "supervisor": "supervisor123"
}
ROLES = {
    "admin": "admin",
    "supervisor": "supervisor"
}
MODULES = ["–ë—é–¥–∂–µ—Ç", "–ü—Ä–æ–¥–∞–∂–∏", "–û—Ç—á—ë—Ç—ã"]

current_year = datetime.now().year
current_month = datetime.now().month
years = list(range(2020, current_year + 2))
month_names = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
]

# –§—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–¥ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
def load_data():
    if os.path.exists(FILE_NAME):
        return pd.read_excel(FILE_NAME)
    else:
        return pd.DataFrame(columns=["–î–∞—Ç–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞", "–¢–∏–ø", "–û—Ç–¥–µ–ª"])

def save_data(data):
    data.to_excel(FILE_NAME, index=False)

def load_users_data():
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            return (
                data.get("users", USERS.copy()),
                data.get("roles", ROLES.copy()),
                data.get("permissions", {})
            )
        except Exception as e:
            st.warning(f"users.json –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {e}. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            save_users_data(USERS.copy(), ROLES.copy(), {})
            return USERS.copy(), ROLES.copy(), {}
    else:
        return USERS.copy(), ROLES.copy(), {}

def save_users_data(users, roles, permissions):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({"users": users, "roles": roles, "permissions": permissions}, f, ensure_ascii=False, indent=2)

def login():
    st.sidebar.header("–í—Ö–æ–¥")
    with st.sidebar.form("login_form", clear_on_submit=False):
        username = st.text_input("–õ–æ–≥–∏–Ω")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        submit = st.form_submit_button("–í–æ–π—Ç–∏")
    if submit:
        users = st.session_state.get("users", USERS)
        roles = st.session_state.get("roles", ROLES)
        # –ü—Ä–∏–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∫ —Å—Ç—Ä–æ–∫–µ –∏ —É–±—Ä–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã
        username = str(username).strip()
        password = str(password).strip()
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ —Ç–∏–ø–æ–º –Ω–µ str
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º users.keys() –∏ users.values() —è–≤–Ω–æ
        if username in users.keys():
            stored_pass = users[username]
            if stored_pass is None:
                st.error("–û—à–∏–±–∫–∞: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–¥–∞–Ω –ø–∞—Ä–æ–ª—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            stored_pass = str(stored_pass).strip()
            if stored_pass == password:
                st.session_state["user"] = username
                st.session_state["role"] = roles.get(username, "user")
                st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
                st.rerun()
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

# –î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
if "user" not in st.session_state:
    # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ login
    users, roles, permissions = load_users_data()
    st.session_state["users"] = users
    st.session_state["roles"] = roles
    st.session_state["permissions"] = permissions
    st.sidebar.title("–ú–µ–Ω—é")
    login()
    st.image("https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?auto=format&fit=crop&w=400&q=80", width=200)
    st.title("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏!")
    st.markdown("""
    ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –í—Ö–æ–¥ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–¥–µ–ª–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    - –í–µ–¥–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –±—é–¥–∂–µ—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
    - –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    - –ì—Ä–∞—Ñ–∏–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –∏ –æ—Ç–¥–µ–ª–∞–º
    
    –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é —Å–ª–µ–≤–∞.
    """)
    st.stop()

user = st.session_state["user"]
role = st.session_state["role"]

# –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
st.sidebar.title("–ú–µ–Ω—é")
if st.sidebar.button("–í—ã–π—Ç–∏"):
    st.session_state.clear()
    st.rerun()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ---
def manage_users():
    st.title("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–æ–ª—è–º–∏")
    st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    new_username = st.text_input("–õ–æ–≥–∏–Ω (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
    new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    module_perms = {}
    for m in MODULES:
        module_perms[m] = st.selectbox(f"–ü—Ä–∞–≤–∞ –¥–ª—è –º–æ–¥—É–ª—è '{m}'", ["editor", "viewer"], key=f"perm_{m}")
    if st.button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        new_username = str(new_username).strip()
        new_password = str(new_password).strip()
        if not new_username or not new_password:
            st.error("–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
        elif new_username in st.session_state.get("users", USERS):
            st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        else:
            users = st.session_state.get("users", USERS).copy()
            roles = st.session_state.get("roles", ROLES).copy()
            permissions = st.session_state.get("permissions", {}).copy()
            users[new_username] = new_password
            roles[new_username] = "custom"
            permissions[new_username] = module_perms
            try:
                save_users_data(users, roles, permissions)
                # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º users.json –∏ –æ–±–Ω–æ–≤–ª—è–µ–º session_state
                users2, roles2, permissions2 = load_users_data()
                st.session_state["users"] = users2
                st.session_state["roles"] = roles2
                st.session_state["permissions"] = permissions2
                st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_username} —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    st.subheader("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∞–≤ –ø–æ –º–æ–¥—É–ª—è–º")
    users = st.session_state.get("users", USERS)
    permissions = st.session_state.get("permissions", {})
    table = []
    for u in users:
        row = [u]
        for m in MODULES:
            row.append(permissions.get(u, {}).get(m, "editor" if ROLES.get(u, "editor") == "editor" else "viewer"))
        table.append(row)
    st.table(pd.DataFrame(table, columns=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"] + MODULES))

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–æ–¥—É–ª—å ---
def get_module_permission(user, module):
    if user == "admin":
        return "editor"
    if user == "supervisor":
        return "viewer_all"
    permissions = st.session_state.get("permissions", {})
    return permissions.get(user, {}).get(module, ROLES.get(user, "editor"))

# --- –ú–ï–ù–Æ ERP ---
menu_items = MODULES + ["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]
if role == "admin":
    menu_items.insert(0, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
menu = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:", menu_items)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def user_settings():
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    st.subheader(f"–¢–µ–∫—É—â–∏–π –ª–æ–≥–∏–Ω: {user}")
    users = st.session_state.get("users", USERS).copy()
    roles = st.session_state.get("roles", ROLES).copy()
    permissions = st.session_state.get("permissions", {}).copy()
    # –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
    st.markdown("**–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è**")
    old_pass = st.text_input("–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å", type="password", key="old_pass")
    new_pass = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password", key="new_pass")
    if st.button("–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"):
        old_pass = str(old_pass).strip()
        new_pass = str(new_pass).strip()
        stored_pass = str(users.get(user, "")).strip()
        if stored_pass == old_pass:
            users[user] = new_pass
            st.session_state["users"] = users
            save_users_data(users, roles, permissions)
            st.success("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!")
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å!")
    # –°–º–µ–Ω–∞ –ª–æ–≥–∏–Ω–∞
    st.markdown("**–°–º–µ–Ω–∞ –ª–æ–≥–∏–Ω–∞**")
    new_login = st.text_input("–ù–æ–≤—ã–π –ª–æ–≥–∏–Ω", key="new_login")
    if st.button("–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω"):
        if not new_login or new_login in users:
            st.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥–∏–Ω!")
        else:
            old_pass = str(old_pass).strip()
            stored_pass = str(users.get(user, "")).strip()
            if stored_pass != old_pass:
                st.error("–î–ª—è —Å–º–µ–Ω—ã –ª–æ–≥–∏–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –≤—ã—à–µ!")
            else:
                users[new_login] = users.pop(user)
                roles[new_login] = roles.pop(user)
                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–∞–≤–∞
                if user in permissions:
                    permissions[new_login] = permissions.pop(user)
                st.session_state["users"] = users
                st.session_state["roles"] = roles
                st.session_state["permissions"] = permissions
                save_users_data(users, roles, permissions)
                st.success("–õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                st.session_state.clear()
                st.rerun()

if menu == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
    user_settings()

elif menu == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" and role == "admin":
    manage_users()

elif menu == "–ë—é–¥–∂–µ—Ç":
    st.title("üìä –ë—é–¥–∂–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º")
    perm = get_module_permission(user, "–ë—é–¥–∂–µ—Ç")
    sprav = load_spravochnik()
    if perm == "editor":
        st.subheader(f"–í–∞—à –æ—Ç–¥–µ–ª: {user}")
        st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        year = st.selectbox("–ì–æ–¥", years, index=years.index(current_year))
        month_name = st.selectbox("–ú–µ—Å—è—Ü", month_names, index=current_month - 1)
        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", sorted(sprav["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].dropna().unique()))
        statya_list = sprav[sprav["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category]["–°—Ç–∞—Ç—å—è"].dropna().unique()
        statya = st.selectbox("–°—Ç–∞—Ç—å—è", sorted(statya_list))
        podstatya_list = sprav[(sprav["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category) & (sprav["–°—Ç–∞—Ç—å—è"] == statya)]["–ü–æ–¥—Å—Ç–∞—Ç—å—è"].dropna().unique()
        subcategory = st.selectbox("–ü–æ–¥—Å—Ç–∞—Ç—å—è", sorted(podstatya_list))
        amount = st.number_input("–°—É–º–º–∞", step=0.01)
        entry_type = st.selectbox("–¢–∏–ø", ["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"])
        if st.button("–î–æ–±–∞–≤–∏—Ç—å"):
            date_str = f"{year}-{month_name}"
            new_row = {
                "–î–∞—Ç–∞": date_str,
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
                "–°—Ç–∞—Ç—å—è": statya,
                "–ü–æ–¥—Å—Ç–∞—Ç—å—è": subcategory,
                "–°—É–º–º–∞": amount,
                "–¢–∏–ø": entry_type,
                "–û—Ç–¥–µ–ª": user
            }
            df = load_data()
            if "–ü–æ–¥—Å—Ç–∞—Ç—å—è" not in df.columns:
                df["–ü–æ–¥—Å—Ç–∞—Ç—å—è"] = ""
            if "–°—Ç–∞—Ç—å—è" not in df.columns:
                df["–°—Ç–∞—Ç—å—è"] = ""
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            save_data(df)
            st.success("–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        df = load_data()
        if "–ü–æ–¥—Å—Ç–∞—Ç—å—è" not in df.columns:
            df["–ü–æ–¥—Å—Ç–∞—Ç—å—è"] = ""
        df = df[df["–û—Ç–¥–µ–ª"] == user]
        if not df.empty:
            pivot = df.pivot_table(index=["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü–æ–¥—Å—Ç–∞—Ç—å—è"], columns="–î–∞—Ç–∞", values="–°—É–º–º–∞", aggfunc="sum", fill_value=0)
            st.dataframe(pivot)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    elif perm == "viewer":
        st.subheader(f"–í–∞—à –æ—Ç–¥–µ–ª: {user}")
        sprav = load_spravochnik()
        df = load_data()
        if "–ü–æ–¥—Å—Ç–∞—Ç—å—è" not in df.columns:
            df["–ü–æ–¥—Å—Ç–∞—Ç—å—è"] = ""
        if "–°—Ç–∞—Ç—å—è" not in df.columns:
            df["–°—Ç–∞—Ç—å—è"] = ""
        df = df[df["–û—Ç–¥–µ–ª"] == user]
        # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É
        category_options = sorted(sprav["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].dropna().unique())
        category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ["–í—Å–µ"] + category_options)
        if category != "–í—Å–µ":
            df = df[df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category]
            statya_options = sorted(sprav[sprav["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category]["–°—Ç–∞—Ç—å—è"].dropna().unique())
        else:
            statya_options = sorted(sprav["–°—Ç–∞—Ç—å—è"].dropna().unique())
        statya = st.selectbox("–°—Ç–∞—Ç—å—è", ["–í—Å–µ"] + statya_options)
        if statya != "–í—Å–µ":
            df = df[df["–°—Ç–∞—Ç—å—è"] == statya]
            podstatya_options = sorted(sprav[(sprav["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category) & (sprav["–°—Ç–∞—Ç—å—è"] == statya)]["–ü–æ–¥—Å—Ç–∞—Ç—å—è"].dropna().unique())
        else:
            podstatya_options = sorted(sprav["–ü–æ–¥—Å—Ç–∞—Ç—å—è"].dropna().unique())
        subcategory = st.selectbox("–ü–æ–¥—Å—Ç–∞—Ç—å—è", ["–í—Å–µ"] + podstatya_options)
        if subcategory != "–í—Å–µ":
            df = df[df["–ü–æ–¥—Å—Ç–∞—Ç—å—è"] == subcategory]
        if not df.empty:
            pivot = df.pivot_table(index=["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—Ç–∞—Ç—å—è", "–ü–æ–¥—Å—Ç–∞—Ç—å—è"], columns="–î–∞—Ç–∞", values="–°—É–º–º–∞", aggfunc="sum", fill_value=0)
            st.dataframe(pivot)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    elif perm == "viewer_all":
        st.subheader("–ë—é–¥–∂–µ—Ç –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)")
        df = load_data()
        if "–ü–æ–¥—Å—Ç–∞—Ç—å—è" not in df.columns:
            df["–ü–æ–¥—Å—Ç–∞—Ç—å—è"] = ""
        if not df.empty:
            pivot = df.pivot_table(index=["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü–æ–¥—Å—Ç–∞—Ç—å—è", "–û—Ç–¥–µ–ª"], columns="–î–∞—Ç–∞", values="–°—É–º–º–∞", aggfunc="sum", fill_value=0)
            st.dataframe(pivot)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    elif role == "admin":
        st.subheader("–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º")
        df = load_data()
        st.dataframe(df)
        st.subheader("üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å")
        income = df[df["–¢–∏–ø"] == "–î–æ—Ö–æ–¥"]["–°—É–º–º–∞"].sum()
        expense = df[df["–¢–∏–ø"] == "–†–∞—Å—Ö–æ–¥"]["–°—É–º–º–∞"].sum()
        balance = income - expense
        st.markdown(f"**–î–æ—Ö–æ–¥—ã:** {income} —Å—É–º  \n**–†–∞—Å—Ö–æ–¥—ã:** {expense} —Å—É–º  \n**–û—Å—Ç–∞—Ç–æ–∫:** {balance} —Å—É–º")
        st.subheader("–ë–∞–ª–∞–Ω—Å –ø–æ –æ—Ç–¥–µ–ª–∞–º")
        for otdel in df["–û—Ç–¥–µ–ª"].unique():
            if otdel == "admin":
                continue
            dfo = df[df["–û—Ç–¥–µ–ª"] == otdel]
            inc = dfo[dfo["–¢–∏–ø"] == "–î–æ—Ö–æ–¥"]["–°—É–º–º–∞"].sum()
            exp = dfo[dfo["–¢–∏–ø"] == "–†–∞—Å—Ö–æ–¥"]["–°—É–º–º–∞"].sum()
            bal = inc - exp
            st.markdown(f"**{otdel}** ‚Äî –î–æ—Ö–æ–¥: {inc} | –†–∞—Å—Ö–æ–¥: {exp} | –û—Å—Ç–∞—Ç–æ–∫: {bal}")

elif menu == "–ü—Ä–æ–¥–∞–∂–∏":
    st.title("üíµ –ú–æ–¥—É–ª—å –ø—Ä–æ–¥–∞–∂")
    perm = get_module_permission(user, "–ü—Ä–æ–¥–∞–∂–∏")
    if perm == "editor":
        st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É")
        product = st.text_input("–¢–æ–≤–∞—Ä/—É—Å–ª—É–≥–∞")
        qty = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", step=1, min_value=1)
        price = st.number_input("–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É", step=0.01)
        client = st.text_input("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å")
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É"):
            st.success("–ü—Ä–æ–¥–∞–∂–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–¥–µ–º–æ)")
    elif perm == "viewer_all":
        st.subheader("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂ –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤ (–¥–µ–º–æ)")
        st.info("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥–∞–∂ –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤.")
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂ (–¥–µ–º–æ)")
    st.info("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥–∞–∂.")
